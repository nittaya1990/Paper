From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Noah van der Aa <ndvdaa@gmail.com>
Date: Tue, 3 Aug 2021 17:28:27 +0200
Subject: [PATCH] Hide unnecessary itemmeta from clients.


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index c334f29c69c1e6e3fe55cd6695e7df400cf36058..2f3a66c1b652b059bfb3cf0b421dfe98c9f96204 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -863,6 +863,11 @@ public class PaperWorldConfig {
         behaviorTickRates = loadTickRates("behavior");
     }
 
+    public boolean hideItemmetaFromClients = true;
+    private void getHideItemmetaFromClients() {
+        hideItemmetaFromClients = getBoolean("hide-itemmeta-from-clients", hideItemmetaFromClients);
+    }
+
     private Table<String, String, Integer> loadTickRates(String type) {
         log("  " + type + ":");
         Table<String, String, Integer> table = HashBasedTable.create();
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 2b7eeb5659b1083ef550eb9feb0b7ba8a92a92e3..62411159a25247395bc48fc48384b6590349768f 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3041,6 +3041,41 @@ public abstract class LivingEntity extends Entity {
         equipment.forEach((enumitemslot, itemstack) -> {
             ItemStack itemstack1 = itemstack.copy();
 
+            // Paper start - hide unnecessary itemmeta from clients.
+            if(itemstack1.getTag() != null && this.level.paperConfig.hideItemmetaFromClients) {
+                CompoundTag oldNbt = itemstack1.getTag();
+                itemstack1.setCount(1);
+                itemstack1.setDamageValue(0);
+
+                CompoundTag newNbt = new CompoundTag();
+
+                if (oldNbt.contains("CustomModelData")) {
+                    newNbt.put("CustomModelData", oldNbt.get("CustomModelData"));
+                }
+
+                // Colors for leather helmets.
+                if (oldNbt.get("display") instanceof CompoundTag oldDisplay && oldDisplay.contains("color")) {
+                    CompoundTag display = new CompoundTag();
+                    display.put("color", oldDisplay.get("color"));
+                    newNbt.put("display", display);
+                }
+
+                if (oldNbt.get("Enchantments") instanceof ListTag oldEnchantments && !oldEnchantments.isEmpty()) {
+                    // The client still renders items with the enchantment glow if the enchantments tag contains at least one (empty) child.
+                    ListTag enchantments = new ListTag();
+                    enchantments.add(new CompoundTag());
+                    newNbt.put("Enchantments", enchantments);
+                }
+
+                // SkullOwner for custom skulls.
+                if (oldNbt.contains("SkullOwner")) {
+                    newNbt.put("SkullOwner", oldNbt.get("SkullOwner"));
+                }
+
+                itemstack1.setTag(newNbt);
+            }
+            // Paper end.
+
             list.add(Pair.of(enumitemslot, itemstack1));
             switch (enumitemslot.getType()) {
                 case HAND:
