From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Noah van der Aa <ndvdaa@gmail.com>
Date: Sat, 7 Aug 2021 15:11:27 +0200
Subject: [PATCH] Add PlayerCompostItemEvent.


diff --git a/src/main/java/com/destroystokyo/paper/event/entity/CompostItemEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/CompostItemEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b30d155d4936b300c4e50ae9ff246bce8bd8fe05
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/CompostItemEvent.java
@@ -0,0 +1,101 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.block.Block;
+import org.bukkit.entity.Entity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when an item is about to be composted by an entity or a hopper.
+ */
+public class CompostItemEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private Block composter;
+    private ItemStack item;
+    private boolean willRaiseLevel;
+
+    private boolean cancelled;
+
+    public CompostItemEvent(@Nullable Entity who, @NotNull Block composter, @NotNull ItemStack item, boolean willRaiseLevel) {
+        super(who);
+        this.composter = composter;
+        this.item = item;
+        this.willRaiseLevel = willRaiseLevel;
+    }
+
+    /**
+     * Gets the entity that is trying to compost the item, or null if a hopper is composting the item.
+     *
+     * @return the composting entity, or null if a hopper is composting the item
+     */
+    @Override
+    @Nullable
+    public Entity getEntity() {
+        return this.entity;
+    }
+
+    /**
+     * Gets the composter that was interacted with.
+     *
+     * @return the composter
+     */
+    @NotNull
+    public Block getComposter() {
+        return this.composter;
+    }
+
+    /**
+     * Gets the item that was used on the composter.
+     *
+     * @return the item
+     */
+    @NotNull
+    public ItemStack getItem() {
+        return this.item;
+    }
+
+    /**
+     * Gets whether or not the composter will rise a level.
+     *
+     * @return true if successful
+     */
+    public boolean willRaiseLevel() {
+        return this.willRaiseLevel;
+    }
+
+    /**
+     * Sets whether or not the composter will rise a level.
+     *
+     * @param willRaiseLevel true if the composter should rise a level
+     */
+    public void setWillRaiseLevel(boolean willRaiseLevel) {
+        this.willRaiseLevel = willRaiseLevel;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
