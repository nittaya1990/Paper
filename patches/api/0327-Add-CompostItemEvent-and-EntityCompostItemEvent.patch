From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Noah van der Aa <ndvdaa@gmail.com>
Date: Sat, 7 Aug 2021 15:11:27 +0200
Subject: [PATCH] Add CompostItemEvent and EntityCompostItemEvent


diff --git a/src/main/java/com/destroystokyo/paper/event/block/CompostItemEvent.java b/src/main/java/com/destroystokyo/paper/event/block/CompostItemEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c16b8f2ee8536f25dc5e88f3efa9cf8052d638b
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/block/CompostItemEvent.java
@@ -0,0 +1,64 @@
+package com.destroystokyo.paper.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when an item is about to be composted by a hopper.
+ * To prevent hoppers from moving items into composters, cancel the InventoryMoveItemEvent.
+ */
+public class CompostItemEvent extends BlockEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private ItemStack item;
+    private boolean willRaiseLevel;
+
+    public CompostItemEvent(@NotNull Block composter, @NotNull ItemStack item, boolean willRaiseLevel) {
+        super(composter);
+        this.item = item;
+        this.willRaiseLevel = willRaiseLevel;
+    }
+
+    /**
+     * Gets the item that was used on the composter.
+     *
+     * @return the item
+     */
+    @NotNull
+    public ItemStack getItem() {
+        return this.item;
+    }
+
+    /**
+     * Gets whether or not the composter will rise a level.
+     *
+     * @return true if successful
+     */
+    public boolean willRaiseLevel() {
+        return this.willRaiseLevel;
+    }
+
+    /**
+     * Sets whether or not the composter will rise a level.
+     *
+     * @param willRaiseLevel true if the composter should rise a level
+     */
+    public void setWillRaiseLevel(boolean willRaiseLevel) {
+        this.willRaiseLevel = willRaiseLevel;
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityCompostItemEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityCompostItemEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..a2de4f153c30a4997f7aee378b1886056cf0e5fc
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityCompostItemEvent.java
@@ -0,0 +1,44 @@
+package com.destroystokyo.paper.event.entity;
+
+import com.destroystokyo.paper.event.block.CompostItemEvent;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Entity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when an item is about to be composted by an entity.
+ */
+public class EntityCompostItemEvent extends CompostItemEvent implements Cancellable {
+
+    private Entity who;
+
+    private boolean cancelled;
+
+    public EntityCompostItemEvent(@NotNull Entity who, @NotNull Block composter, @NotNull ItemStack item, boolean willRaiseLevel) {
+        super(composter, item, willRaiseLevel);
+        this.who = who;
+    }
+
+    /**
+     * Gets the entity that interacted with the composter.
+     *
+     * @return the entity that composted an item.
+     */
+    @NotNull
+    public Entity getEntity() {
+        return this.who;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+}
